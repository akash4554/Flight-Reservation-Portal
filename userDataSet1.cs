//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SkyShark1 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class userDataSet1 : DataSet {
        
        private dtUsersDataTable tabledtUsers;
        
        public userDataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected userDataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtUsers"] != null)) {
                    this.Tables.Add(new dtUsersDataTable(ds.Tables["dtUsers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtUsersDataTable dtUsers {
            get {
                return this.tabledtUsers;
            }
        }
        
        public override DataSet Clone() {
            userDataSet1 cln = ((userDataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["dtUsers"] != null)) {
                this.Tables.Add(new dtUsersDataTable(ds.Tables["dtUsers"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabledtUsers = ((dtUsersDataTable)(this.Tables["dtUsers"]));
            if ((this.tabledtUsers != null)) {
                this.tabledtUsers.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "userDataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/userDataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabledtUsers = new dtUsersDataTable();
            this.Tables.Add(this.tabledtUsers);
        }
        
        private bool ShouldSerializedtUsers() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void dtUsersRowChangeEventHandler(object sender, dtUsersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dtUsersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUsername;
            
            private DataColumn columnPassword;
            
            internal dtUsersDataTable() : 
                    base("dtUsers") {
                this.InitClass();
            }
            
            internal dtUsersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            internal DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            public dtUsersRow this[int index] {
                get {
                    return ((dtUsersRow)(this.Rows[index]));
                }
            }
            
            public event dtUsersRowChangeEventHandler dtUsersRowChanged;
            
            public event dtUsersRowChangeEventHandler dtUsersRowChanging;
            
            public event dtUsersRowChangeEventHandler dtUsersRowDeleted;
            
            public event dtUsersRowChangeEventHandler dtUsersRowDeleting;
            
            public void AdddtUsersRow(dtUsersRow row) {
                this.Rows.Add(row);
            }
            
            public dtUsersRow AdddtUsersRow(string Username, string Password) {
                dtUsersRow rowdtUsersRow = ((dtUsersRow)(this.NewRow()));
                rowdtUsersRow.ItemArray = new object[] {
                        Username,
                        Password};
                this.Rows.Add(rowdtUsersRow);
                return rowdtUsersRow;
            }
            
            public dtUsersRow FindByUsername(string Username) {
                return ((dtUsersRow)(this.Rows.Find(new object[] {
                            Username})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                dtUsersDataTable cln = ((dtUsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new dtUsersDataTable();
            }
            
            internal void InitVars() {
                this.columnUsername = this.Columns["Username"];
                this.columnPassword = this.Columns["Password"];
            }
            
            private void InitClass() {
                this.columnUsername = new DataColumn("Username", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUsername);
                this.columnPassword = new DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPassword);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnUsername}, true));
                this.columnUsername.AllowDBNull = false;
                this.columnUsername.Unique = true;
                this.columnPassword.AllowDBNull = false;
            }
            
            public dtUsersRow NewdtUsersRow() {
                return ((dtUsersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new dtUsersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(dtUsersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtUsersRowChanged != null)) {
                    this.dtUsersRowChanged(this, new dtUsersRowChangeEvent(((dtUsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtUsersRowChanging != null)) {
                    this.dtUsersRowChanging(this, new dtUsersRowChangeEvent(((dtUsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtUsersRowDeleted != null)) {
                    this.dtUsersRowDeleted(this, new dtUsersRowChangeEvent(((dtUsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtUsersRowDeleting != null)) {
                    this.dtUsersRowDeleting(this, new dtUsersRowChangeEvent(((dtUsersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedtUsersRow(dtUsersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dtUsersRow : DataRow {
            
            private dtUsersDataTable tabledtUsers;
            
            internal dtUsersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtUsers = ((dtUsersDataTable)(this.Table));
            }
            
            public string Username {
                get {
                    return ((string)(this[this.tabledtUsers.UsernameColumn]));
                }
                set {
                    this[this.tabledtUsers.UsernameColumn] = value;
                }
            }
            
            public string Password {
                get {
                    return ((string)(this[this.tabledtUsers.PasswordColumn]));
                }
                set {
                    this[this.tabledtUsers.PasswordColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dtUsersRowChangeEvent : EventArgs {
            
            private dtUsersRow eventRow;
            
            private DataRowAction eventAction;
            
            public dtUsersRowChangeEvent(dtUsersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public dtUsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
